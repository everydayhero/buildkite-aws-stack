#!/bin/bash -ie

if [ -z "$SECRETS_BUCKET" ]; then
  echo "SECRETS_BUCKET is not specified"
  exit 1
fi

if [ -z "$SECRETS_KEY" ]; then
  echo "SECRETS_KEY is not specified"
  exit 1
fi

upload() {
  local key=$1
  AWS_ACCESS_KEY_ID="$TF_VAR_access_key"
  AWS_SECRET_ACCESS_KEY="$TF_VAR_secret_key"
  AWS_DEFAULT_REGION="$TF_VAR_region"
  aws s3 cp --acl private --sse-c --sse-c-key "$SECRETS_KEY" - "s3://${SECRETS_BUCKET}/${key}"
}

ssh_config() {
  echo "mkdir -p ~/.ssh/cm"
  echo "chmod 0700 ~/.ssh"
  cat <<EOT
cat <<SSH_CONFIG > ~/.ssh/config
Host bastion-* *.plain.edh.ro
  ForwardAgent yes
  TCPKeepAlive yes
  ServerAliveInterval 300
  StrictHostKeyChecking no
  ControlPath ~/.ssh/cm/%r@%h:%p
  ControlMaster auto
  ControlPersist 10m
  User deployer

Host bastion-production
  Hostname bastion.everydayhero.io
  Port 2020

Host bastion-staging
  Hostname bastion.everydayhero-staging.io
  Port 2020

Host production-*.plain.edh.ro
  ProxyCommand ssh -q bastion-production 'ncat \\\`echo %h | cut -f 1-1 -d.\\\` %p'

Host staging-*.plain.edh.ro
  ProxyCommand ssh -q bastion-staging 'ncat \\\`echo %h | cut -f 1-1 -d.\\\` %p'

Host github.com
  StrictHostKeyChecking no
SSH_CONFIG
EOT
}

docker_auth() {
  if [ -f ~/.docker/config.json ]; then
    # deprecated
    echo "export DOCKER_AUTH=$(jq -rc '.auths | tojson | @sh' ~/.docker/config.json)"
  fi
  if [ -n "$DOCKER_HUB_USER" ]; then
    echo "export DOCKER_LOGIN_USER=$DOCKER_HUB_USER"

    if [ -n "$DOCKER_HUB_PASSWORD" ]; then
      echo "export DOCKER_LOGIN_PASSWORD=$DOCKER_HUB_PASSWORD"
    fi
  fi
}

configure_plain() {
  local code_dir=~/Code
  echo "mkdir -p $code_dir"

  for repo in configure plain-utils; do
    cat <<EOT
if [ -d "$code_dir/$repo" ] ; then
  cd "$code_dir/$repo" && git pull
else
  cd "$code_dir" && git clone "git@github.com:everydayhero/${repo}.git"
fi
export PATH="${code_dir}/${repo}/bin:\$PATH"
EOT
  done
}

buildkite_flags() {
  echo "export BUILDKITE_GIT_CLEAN_FLAGS=-fdqx"
  echo "export BUILDKITE_API_ACCESS_TOKEN=$BUILDKITE_API_ACCESS_TOKEN"
}

gen_env() {
cat <<ENV | upload "$1"
$(ssh_config)
$(docker_auth)
$(configure_plain)
$(buildkite_flags)
ENV
}

upload_ssh_key() {
  if [ -f ~/.ssh/id_rsa ]; then
    cat ~/.ssh/id_rsa | upload "$1"
  fi
}

echo "~~~ Uploading id_rsa"
if [ -n "$SECRETS_PREFIX" ]; then
  upload_ssh_key "${SECRETS_PREFIX}/id_rsa" # deprecated key destination
fi
upload_ssh_key "${SHARED_SSH_KEY_NAME:-private_ssh_key}"

echo "~~~ Uploading env"
if [ -n "$SECRETS_PREFIX" ]; then
  gen_env "${SECRETS_PREFIX}/env" # deprecated env destination
fi
gen_env "env"
